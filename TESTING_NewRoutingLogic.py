#!/usr/bin/env python

#http://www.maxburstein.com/blog/introduction-to-graph-theory-finding-shortest-path/
import heapq
import sys

graph_nodes=[
	 "00","01", "02","03","04","10","11","12",
	 "13","14","20","21",
	 "22","23","24","30",
	 "31","32","33","34",
	 "40","41","42","43","44",
	 "C1", "C2","C3","C4",
	 "C5","C6","C7", "C8",
	 "C9","C10","C11","C12",
	 "C13","C14","C15","C16","C17","C18",
	 "C19","C20", "C21","C22", "C23","C24",
	 "C25","C26", "C27","C28",
	 "C29","C30", "C31","C32",
	 "C33","C34", "C35","C36",
	 "C37","C38", "C39","C40"  
	 ]

CB_SB_map={
	 "00":{'C1':1,'01':1,'C4':1,'10':1},       
	 "01":{'00':1,'02':1,'11':1,'C1':1,'C5':1,'C2':1},
	 "02":{'01':1,'12':1,'03':1,'C5':1,'C8':1,'C6':1},
	 "03":{'02':1,'04':1,'13':1,'C8':1,'C9':1,'C11':1},
	 "04":{'03':1,'14':1,'C11':1,'C12':1},	 
	 "10":{'11':1,'20':1,'00':1,'C3':1,'C14':1,'C3':1},       
	 "11":{'10':1,'12':1,'21':1,'01':1,'C3':1,'C7':1,'C15':1,'C2':1},
	 "12":{'11':1,'13':1,'22':1,'02':1,'C7':1,'C10':1,'C17':1,'C6':1},
	 "13":{'12':1,'14':1,'23':1,'03':1,'C10':1,'C13':1,'C19':1,'C9':1},
	 "14":{'13':1,'24':1,'04':1,'C13':1,'C21':1,'C12':1},
	 "20":{'21':1,'30':1,'10':1,'C14':1,'C16':1,'C23':1},       
	 "21":{'11':1,'20':1,'22':1,'31':1,'C16':1,'C18':1,'C24':1,'C15':1},
	 "22":{'12':1,'21':1,'23':1,'32':1,'C18':1,'C20':1,'C26':1,'C17':1},
	 "23":{'22':1,'24':1,'33':1,'13':1,'C20':1,'C22':1,'C28':1,'C19':1},
	 "24":{'23':1,'34':1,'14':1,'C22':1,'C30':1,'C21':1},
	 "30":{'31':1,'40':1,'20':1,'C25':1,'C32':1,'C23':1},       
	 "31":{'30':1,'32':1,'41':1,'21':1,'C25':1,'C27':1,'C33':1,'C24':1},
	 "32":{'31':1,'33':1,'42':1,'22':1,'C27':1,'C29':1,'C35':1,'C26':1},
	 "33":{'23':1,'32':1,'34':1,'43':1,'C29':1,'C31':1,'C37':1,'C28':1},
	 "34":{'33':1,'44':1,'24':1,'C31':1,'C39':1,'C30':1},
	 "40":{'30':1,'41':1,'C32':1,'C34':1},       
	 "41":{'40':1,'31':1,'42':1,'C34':1,'C33':1,'C36':1},
	 "42":{'41':1,'32':1,'43':1,'C36':1,'C35':1,'C38':1},
	 "43":{'42':1,'33':1,'44':1,'C38':1,'C37':1,'C40':1},
	 "44":{'43':1,'34':1,'C40':1,'C39':1},
	 "C1":{'00':1,'01':1},
	 "C2":{'01':1,'11':1},
	 "C3":{'10':1,'11':1},
	 "C4":{'00':1,'10':1},
	 "C5":{'01':1,'02':1},
	 "C6":{'02':1,'12':1},
	 "C7":{'11':1,'12':1},
	 "C8":{'02':1,'03':1},
	 "C9":{'03':1,'13':1},
	 "C10":{'12':1,'13':1},
	 "C11":{'03':1,'04':1},
	 "C12":{'04':1,'14':1},
	 "C13":{'13':1,'14':1},
	 "C14":{'10':1,'20':1},
	 "C15":{'11':1,'21':1},
	 "C16":{'20':1,'21':1},
	 "C17":{'12':1,'22':1},
	 "C18":{'21':1,'22':1},
	 "C19":{'13':1,'23':1},
	 "C20":{'22':1,'23':1},
	 "C21":{'14':1,'24':1},
	 "C22":{'23':1,'24':1},
	 "C23":{'20':1,'30':1},
	 "C24":{'21':1,'31':1},
	 "C25":{'30':1,'31':1},
	 "C26":{'22':1,'32':1},
	 "C27":{'31':1,'32':1},
	 "C28":{'23':1,'33':1},
	 "C29":{'32':1,'33':1},
	 "C30":{'24':1,'34':1},
	 "C31":{'33':1,'34':1},
	 "C32":{'30':1,'40':1},
	 "C33":{'31':1,'41':1},
	 "C34":{'40':1,'41':1},
	 "C35":{'32':1,'42':1},
	 "C36":{'41':1,'42':1},
	 "C37":{'33':1,'43':1},
	 "C38":{'42':1,'43':1},
	 "C39":{'34':1,'44':1},
	 "C40":{'43':1,'44':1}
	 }



class Graph:
    
    def __init__(self):
        self.vertices = {}
        
    def add_vertex(self, name, edges):
        self.vertices[name] = edges
    
    def shortest_path(self, start, finish):
        distances = {} # Distance from start to node
        previous = {}  # Previous node in optimal path from source
        nodes = [] # Priority queue of all nodes in Graph

        for vertex in self.vertices:
            if vertex == start: # Set root node as distance of 0
                distances[vertex] = 0
                heapq.heappush(nodes, [0, vertex])
            else:
                distances[vertex] = sys.maxsize
                heapq.heappush(nodes, [sys.maxsize, vertex])
            previous[vertex] = None
        
        while nodes:
            smallest = heapq.heappop(nodes)[1] # Vertex in nodes with smallest distance in distances
            if smallest == finish: # If the closest node is our target we're done so print the path
                path = []
                while previous[smallest]: # Traverse through nodes til we reach the root which is 0
                    path.append(smallest)
                    smallest = previous[smallest]
                return path
            if distances[smallest] == sys.maxsize: # All remaining vertices are inaccessible from source
                break
            
            for neighbor in self.vertices[smallest]: # Look at all the nodes that this vertex is attached to
                alt = distances[smallest] + self.vertices[smallest][neighbor] # Alternative path distance
                if alt < distances[neighbor]: # If there is a new shortest path update our priority queue (relax)
                    distances[neighbor] = alt
                    previous[neighbor] = smallest
                    for n in nodes:
                        if n[1] == neighbor:
                            n[0] = alt
                            break
                    heapq.heapify(nodes)
        return distances
        
    def __str__(self):
        return str(self.vertices)

if __name__ == '__main__':
    g = Graph()
    for vertice in graph_nodes:
    	g.add_vertex(vertice,CB_SB_map[vertice])



route=[]
start='C1'
finish='C36'
route=g.shortest_path(start,finish)
print 'initial route %s'%route

route.append(start)
print 'route with start %s'%route


route.reverse()
print 'final route %s'%route

'''
CB_SB_map={
	  "00":['C1','01','C4','10'],       
	  "01":['00','02','11','C1','C5','C2'],
	  "02":['01','12','03','C5','C8','C6'],
	  "03":['02','04','13','C8','C9','C11'],
	  "04":['03','14','C11','C12'],	  
	  "10":['11','20','00','C3','C14','C3'],       
	  "11":['10','12','21','01','C3','C7','C15','C2'],
	  "12":['11','13','22','02','C7','C10','C17','C6'],
	  "13":['12','14','23','03','C10','C13','C19','C9'],
	  "14":['13','24','04','C13','C21','C12'],
	  "20":['21','30','10','C14','C16','C23'],       
	  "21":['11','20','22','31','C16','C18','C24','C15'],
	  "22":['12','21','23','32','C18','C20','C26','C17'],
	  "23":['22','24','33','13','C20','C22','C28','C19'],
	  "24":['23','34','14','C22','C30','C21'],
	  "30":['31','40','20','C25','C32','C23'],       
	  "31":['30','32','41','21','C25','C27','C33','C24'],
	  "32":['31','33','42','22','C27','C29','C35','C26'],
	  "33":['23','32','34','43','C29','C31','C37','C28'],
	  "34":['33','44','24','C31','C39','C30'],
	  "40":['30','41','C32','C34'],       
	  "41":['40','31','42','C34','C33','C36'],
	  "42":['41','32','43','C36','C35','C38'],
	  "43":['42','33','44','C38','C37','C40'],
	  "44":['43','34','C40','C39'],
	  "C1":['00','01'],
	  "C2":['01','11'],
	  "C3":['10','11'],
	  "C4":['00','10'],
	  "C5":['01','02'],
	  "C6":['02','12'],
	  "C7":['11','12'],
	  "C8":['02','03'],
	  "C9":['03','13'],
	  "C10":['12','13'],
	  "C11":['03','04'],
	  "C12":['04','14'],
	  "C13":['13','14'],
	  "C14":['10','20'],
	  "C15":['11','21'],
	  "C16":['20','21'],
	  "C17":['12','22'],
	  "C18":['21','22'],
	  "C19":['13','23'],
	  "C20":['22','23'],
	  "C21":['14','24'],
	  "C22":['23','24'],
	  "C23":['20','30'],
	  "C24":['21','31'],
	  "C25":['30','31'],
	  "C26":['22','32'],
	  "C27":['31','32'],
	  "C28":['23','33'],
	  "C29":['32','33'],
	  "C30":['24','34'],
	  "C31":['33','34'],
	  "C32":['30','40'],
	  "C33":['31','41'],
	  "C34":['40','41'],
	  "C35":['32','42'],
	  "C36":['41','42'],
	  "C37":['33','43'],
	  "C38":['42','43'],
	  "C39":['34','44'],
	  "C40":['43','44']  
	  }
	  '''