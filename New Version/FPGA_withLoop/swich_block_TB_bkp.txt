
module test_bench_SB(); 

wire IQ1,IQ2,IQ3,IQ4,IQ5,IQ6,IQ7,IQ8,bit_out_CLB,bit_out_SB;
reg bit_in_CLB,bit_in_SB,sb_prgm_b;
reg I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,prgm_b;
wire w1,w2,w3,w4,w5,w6,w7,w8,x1,x2,x3,x4,x5,x6,x7,x8,y1,y2,y3,y4,y5,y6,y7,y8;
//reg [3:0] sel;sel
reg clk,reset,switch;
reg [295:0] config_stream ;
reg CLB_prgm_b;
integer counter,lut_count;
CLB CLB1(.I1(I1),.I2(I2),.I3(I3),.I4(I4),.I5(I5),.I6(I6),.I7(I7),.I8(I8),.I9(I9),.I10(I10),.I11(I11),.I12(I12),.I13(I13),.I14(I14),.I15(I15),.I16(I16),.I17(I17),.I18(I18),.clk(clk),
	.reset(reset),.prgm_b(prgm_b),.bit_out(bit_out_CLB),.CLB_prgm_b(CLB_prgm_b),.bit_in(bit_in_CLB),.IQ1(IQ1),.IQ2(IQ2),.IQ3(IQ3),.IQ4(IQ4),.IQ5(IQ5),.IQ6(IQ6),.IQ7(IQ7),.IQ8(IQ8));
   //inp,bit_in,sel,clk,reset,prgm_b,bit_out,out
//wire bit_out;
reg A0,A1,A2,A3,A4,A5,A6,A7,B0,B1,B2,B3,B4,B5,B6,B7,C0,C1,C2,C3,C4,C5,C6,C7,D0,D1,D2,D3,D4,D5,D6,D7;

//reg I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,bit_in,prgm_b;
//reg [3:0] sel;sel

reg [127:0] SB_config_stream ;
integer counter_sb,SB_count;
/*switch_block SB(.bit_in(bit_in_SB),.bit_out(bit_out_SB),.clk(clk),.reset(reset),.prgm_b(prgm_b),.sb_prgm_b(sb_prgm_b),.A0(IQ1),.A1(IQ2),.A2(IQ2),.A3(IQ2),.A4(IQ2),.A5(IQ2),.A6(IQ2),.A7(IQ2),
	.B0(w1),.B1(w2),.B2(w3),.B3(w4),.B4(w5),.B5(w6),.B6(w7),.B7(w8),
.C0(x1),.C1(x2),.C2(x3),.C3(x4),.C4(x5),.C5(x6),.C6(x7),.C7(x8),
.D0(y1),.D1(y2),.D2(y3),.D3(y4),.D4(y5),.D5(y6),.D6(y7),.D7(y8));*/
initial begin
// first configuration
//time=0, send the configuration bit stream, clk =0,reset=0(lut has XXXXXXX), switch bit =x
config_stream= 296'b00000000010001000110111111111111111100000000011000100011011111111111111110000010000100010001101111111111111111000100000010001000110111111111111111100000100001000100011011111111111111110000000001100010001101111111111111111000011000010001000110111111111111111100011000001000100011111111111111111110;
SB_config_stream= 128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;   
//last 16 bits for LUT and MSB for 2X1 MUX
 clk = 1'b0;
 reset=1'b0;
 //switch=1'b0;
 prgm_b=1'b1;   //indicates start of bit_stream----active low
 CLB_prgm_b=1'b0;
 sb_prgm_b=1'b0;
 fork
 #1 reset=1'b1;
 #1 prgm_b=1'b0;
 #1 CLB_prgm_b=1'b1;
 #1 sb_prgm_b=1'b1;
 #1 counter=0;lut_count=0;counter_sb=0;SB_count=0;
 #1 reset=1'b1;
 #2 reset=1'b0;
 join
end


always@(posedge clk)
begin
 //always block begins
 //while (prgm_b==1'b0)
//begin //while loop starts
if(prgm_b!=1'b1 && CLB_prgm_b!=1'b0) begin

	bit_in_CLB <= config_stream[1:0];
	config_stream <=config_stream>>1;
	
	if((counter == 37) && CLB_prgm_b!=1'b0)
	begin
	    //config_stream=config_stream>>1;
		lut_count=lut_count+1;
		//switch=config_stream[1:0];
		//config_stream=config_stream>>1;
		counter=0;
		if(lut_count==8)
		begin
			prgm_b=1'b1;
			CLB_prgm_b=1'b0;
			
		end
	end 
	counter=counter+1;//if endsj
end 
//#1 In = 16'b1100_0011_1011_0101; 
//#2 sel=4'b0000;
end //always block ends

always@(posedge clk)
begin
if(prgm_b!=1'b1 && sb_prgm_b!=1'b0) begin

	bit_in_SB <= SB_config_stream[1:0];
	SB_config_stream <=SB_config_stream>>1;
	
	if((counter_sb == 128) && sb_prgm_b!=1'b0)
	begin
	   
		SB_count=SB_count+1;
	
		counter_sb=0;
		if(SB_count==1)
		begin
			//prgm_b=1'b1;
			sb_prgm_b=1'b0;
			
		end
	end 
	counter_sb=counter_sb+1;//if endsj
end 

end//alwys ends

initial begin

forever #5 clk=!clk;
end

initial
begin 

#6350;               //time=5 seconds

I1=0;I2=0;I3=0;I4=1;I5=1;I6=1;I7=1;I8=0;
I9=0;I10=1;I11=1;I12=1;I13=0;I14=1;I15=1;
I16=0;I17=1;I18=1;
reset=1'b0;
//switch=0;
#6360;
I1=1;I2=0;I3=0;I4=1;I5=1;I6=0;I7=1;I8=0;
I9=0;I10=1;I11=1;I12=0;I13=0;I14=1;I15=1;
I16=0;I17=0;I18=0;
//switch=0;
reset=1'b0;
#6370;

 I1=1;I2=0;I3=0;I4=1;I5=1;I6=0;I7=1;I8=0;
I9=0;I10=0;I11=1;I12=1;I13=1;I14=1;I15=0;
I16=0;I17=1;I18=1;
//switch=0;
reset=1'b0;
#6380;
//reset=1'b1;
//switch=0;
I1=0;I2=0;I3=0;I4=1;I5=1;I6=0;I7=1;I8=0;
I9=0;I10=0;I11=1;I12=0;I13=0;I14=1;I15=1;
I16=1;I17=1;I18=1;
#20500 $finish;
end
initial begin
    $dumpfile("test.vcd");

    $dumpvars(0,test_bench_SB);
   $timeformat(-9, 1, " ns", 6);
$monitor("At t=%t prgm_b=%b reset=%b confi_stream=%b confi_stream=%d",$time,prgm_b,reset,config_stream,lut_count);
end

//Stimulus



endmodule